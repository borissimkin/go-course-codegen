// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package main

import (
	"context"
	"encoding/json"
	"net/http"
	"strconv"
)
type response struct {
	Response json.RawMessage `json:"response"`
	Error    string          `json:"error"`
}

func checkToken(token string) bool {
	return token == "100500"
}

func getErrorResponse(err string) []byte {
	data, _ := json.Marshal(response{
		Error: err,
	})

	return data
}

	// MyApi
func (h *MyApi) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch r.URL.Path {
		
		case "/user/profile":
			h.handlerProfile(w, r)
		
		case "/user/create":
			h.handlerCreate(w, r)
		
		default:
			w.WriteHeader(http.StatusNotFound)
	}
}

func (h *MyApi) handlerProfile(w http.ResponseWriter, r *http.Request) {

	params := ProfileParams{}

	login := r.FormValue("login")

	// required
	if login == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getErrorResponse("login must me not empty"))
		return
	}
	
	params.Login = login

	ctx := context.Background()

	result := response{}

	resp, err := h.Profile(ctx, params)
	if err != nil {
		apiError := err.(ApiError)

		w.WriteHeader(apiError.HTTPStatus)
		result.Error = apiError.Error()

		data, _ := json.Marshal(result)
		w.Write(data)
		return
	}

	data, _ := json.Marshal(resp)
	result.Response = data

	data, _ = json.Marshal(result)
	
	w.WriteHeader(http.StatusOK)
	w.Write(data)
	
}

func (h *MyApi) handlerCreate(w http.ResponseWriter, r *http.Request) {

	// check http method
	method := "POST"
	if r.Method != method {
		w.WriteHeader(http.StatusNotAcceptable)
		w.Write(getErrorResponse("bad method"))
		return
	}
	
	// check auth
	token := r.Header.Get("X-Auth")
	if !checkToken(token) {
		w.WriteHeader(http.StatusForbidden)
		w.Write(getErrorResponse("unathorized"))
		return
	}
	
	params := CreateParams{}

	login := r.FormValue("login")

	// required
	if login == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getErrorResponse("login must me not empty"))
		return
	}
	
	// min
	if len(login) < 0 {
    	w.WriteHeader(http.StatusBadRequest)
    	w.Write(getErrorResponse("login len must be >= 0"))
    	return
	}
	
	params.Login = login

	name := r.FormValue("full_name")

	params.Name = name

	status := r.FormValue("status")

	// default
	if status == "" {
		status = "user"
	}
	
	// enum
	if !(status == "user" || status == "moderator" || status == "admin") {
    	w.WriteHeader(http.StatusBadRequest)
    	w.Write(getErrorResponse("status must be one of [user, moderator, admin]"))
    	return
	}
	
	params.Status = status

	age := r.FormValue("age")

	// cast to int
	ageInt, err := strconv.Atoi(age)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getErrorResponse("age must be int"))
	}
	
	// min
	if ageInt < 128 {
    	w.WriteHeader(http.StatusBadRequest)
    	w.Write(getErrorResponse("age must be >= 128"))
    	return
	}
	
	// max
	if ageInt > 128 {
    	w.WriteHeader(http.StatusBadRequest)
    	w.Write(getErrorResponse("age must be <= 128"))
    	return
	}
	
	params.Age = ageInt

	ctx := context.Background()

	result := response{}

	resp, err := h.Create(ctx, params)
	if err != nil {
		apiError := err.(ApiError)

		w.WriteHeader(apiError.HTTPStatus)
		result.Error = apiError.Error()

		data, _ := json.Marshal(result)
		w.Write(data)
		return
	}

	data, _ := json.Marshal(resp)
	result.Response = data

	data, _ = json.Marshal(result)
	
	w.WriteHeader(http.StatusOK)
	w.Write(data)
	
}


	// OtherApi
func (h *OtherApi) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch r.URL.Path {
		
		case "/user/create":
			h.handlerCreate(w, r)
		
		default:
			w.WriteHeader(http.StatusNotFound)
	}
}

func (h *OtherApi) handlerCreate(w http.ResponseWriter, r *http.Request) {

	// check http method
	method := "POST"
	if r.Method != method {
		w.WriteHeader(http.StatusNotAcceptable)
		w.Write(getErrorResponse("bad method"))
		return
	}
	
	// check auth
	token := r.Header.Get("X-Auth")
	if !checkToken(token) {
		w.WriteHeader(http.StatusForbidden)
		w.Write(getErrorResponse("unathorized"))
		return
	}
	
	params := OtherCreateParams{}

	username := r.FormValue("username")

	// required
	if username == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getErrorResponse("username must me not empty"))
		return
	}
	
	// min
	if len(username) < 0 {
    	w.WriteHeader(http.StatusBadRequest)
    	w.Write(getErrorResponse("username len must be >= 0"))
    	return
	}
	
	params.Username = username

	name := r.FormValue("account_name")

	params.Name = name

	class := r.FormValue("class")

	// default
	if class == "" {
		class = "warrior"
	}
	
	// enum
	if !(class == "warrior" || class == "sorcerer" || class == "rouge") {
    	w.WriteHeader(http.StatusBadRequest)
    	w.Write(getErrorResponse("class must be one of [warrior, sorcerer, rouge]"))
    	return
	}
	
	params.Class = class

	level := r.FormValue("level")

	// cast to int
	levelInt, err := strconv.Atoi(level)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getErrorResponse("level must be int"))
	}
	
	// min
	if levelInt < 50 {
    	w.WriteHeader(http.StatusBadRequest)
    	w.Write(getErrorResponse("level must be >= 50"))
    	return
	}
	
	// max
	if levelInt > 50 {
    	w.WriteHeader(http.StatusBadRequest)
    	w.Write(getErrorResponse("level must be <= 50"))
    	return
	}
	
	params.Level = levelInt

	ctx := context.Background()

	result := response{}

	resp, err := h.Create(ctx, params)
	if err != nil {
		apiError := err.(ApiError)

		w.WriteHeader(apiError.HTTPStatus)
		result.Error = apiError.Error()

		data, _ := json.Marshal(result)
		w.Write(data)
		return
	}

	data, _ := json.Marshal(resp)
	result.Response = data

	data, _ = json.Marshal(result)
	
	w.WriteHeader(http.StatusOK)
	w.Write(data)
	
}

